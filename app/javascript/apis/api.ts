/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiV1DailyPointsIndexResultSiegeGet200Response
 */
export interface ApiV1DailyPointsIndexResultSiegeGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DailyPointsIndexResultSiegeGet200Response
     */
    'max_recorded_on': string | null;
    /**
     * 
     * @type {Array<DailyPointGuildServer>}
     * @memberof ApiV1DailyPointsIndexResultSiegeGet200Response
     */
    'daily_points': Array<DailyPointGuildServer>;
}
/**
 * 
 * @export
 * @interface DailyPoint
 */
export interface DailyPoint {
    /**
     * 
     * @type {number}
     * @memberof DailyPoint
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPoint
     */
    'guild_id': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPoint
     */
    'total_points': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPoint
     */
    'yellow_city_count': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPoint
     */
    'purple_city_count': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPoint
     */
    'blue_city_count': number;
    /**
     * 
     * @type {string}
     * @memberof DailyPoint
     */
    'recorded_on': string;
    /**
     * 
     * @type {string}
     * @memberof DailyPoint
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof DailyPoint
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface DailyPointGuildServer
 */
export interface DailyPointGuildServer {
    /**
     * 
     * @type {number}
     * @memberof DailyPointGuildServer
     */
    'daily_point_id': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPointGuildServer
     */
    'total_points': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPointGuildServer
     */
    'yellow_city_count': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPointGuildServer
     */
    'purple_city_count': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPointGuildServer
     */
    'blue_city_count': number;
    /**
     * 
     * @type {string}
     * @memberof DailyPointGuildServer
     */
    'recorded_on': string;
    /**
     * 
     * @type {string}
     * @memberof DailyPointGuildServer
     */
    'guild_name': string;
    /**
     * 
     * @type {string}
     * @memberof DailyPointGuildServer
     */
    'server_name': string;
}
/**
 * 
 * @export
 * @interface DailyPointInput
 */
export interface DailyPointInput {
    /**
     * 
     * @type {number}
     * @memberof DailyPointInput
     */
    'guild_id': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPointInput
     */
    'total_points': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPointInput
     */
    'yellow_city_count': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPointInput
     */
    'purple_city_count': number;
    /**
     * 
     * @type {number}
     * @memberof DailyPointInput
     */
    'blue_city_count': number;
    /**
     * 
     * @type {string}
     * @memberof DailyPointInput
     */
    'recorded_on': string;
}
/**
 * 
 * @export
 * @interface DailyPointOCR
 */
export interface DailyPointOCR {
    /**
     * 
     * @type {number}
     * @memberof DailyPointOCR
     */
    'guild_id': number | null;
    /**
     * 
     * @type {string}
     * @memberof DailyPointOCR
     */
    'guild_name': string;
    /**
     * 
     * @type {number}
     * @memberof DailyPointOCR
     */
    'total_points': number | null;
    /**
     * 
     * @type {number}
     * @memberof DailyPointOCR
     */
    'yellow_city_count': number | null;
    /**
     * 
     * @type {number}
     * @memberof DailyPointOCR
     */
    'purple_city_count': number | null;
    /**
     * 
     * @type {number}
     * @memberof DailyPointOCR
     */
    'blue_city_count': number | null;
}
/**
 * 
 * @export
 * @interface Guild
 */
export interface Guild {
    /**
     * 
     * @type {number}
     * @memberof Guild
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Guild
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Guild
     */
    'leader_name': string;
    /**
     * 
     * @type {string}
     * @memberof Guild
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Guild
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface GuildInputCreate
 */
export interface GuildInputCreate {
    /**
     * 
     * @type {string}
     * @memberof GuildInputCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GuildInputCreate
     */
    'leader_name': string;
}
/**
 * 
 * @export
 * @interface GuildInputUpdate
 */
export interface GuildInputUpdate {
    /**
     * 
     * @type {number}
     * @memberof GuildInputUpdate
     */
    'server_id': number;
    /**
     * 
     * @type {string}
     * @memberof GuildInputUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GuildInputUpdate
     */
    'leader_name': string;
}
/**
 * 
 * @export
 * @interface GuildInputWithLatestPower
 */
export interface GuildInputWithLatestPower {
    /**
     * 
     * @type {GuildInputWithLatestPowerGuild}
     * @memberof GuildInputWithLatestPower
     */
    'guild': GuildInputWithLatestPowerGuild;
    /**
     * 
     * @type {GuildInputWithLatestPowerPowerTransition}
     * @memberof GuildInputWithLatestPower
     */
    'power_transition': GuildInputWithLatestPowerPowerTransition;
}
/**
 * 
 * @export
 * @interface GuildInputWithLatestPowerGuild
 */
export interface GuildInputWithLatestPowerGuild {
    /**
     * 
     * @type {number}
     * @memberof GuildInputWithLatestPowerGuild
     */
    'server_id': number | null;
    /**
     * 
     * @type {string}
     * @memberof GuildInputWithLatestPowerGuild
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GuildInputWithLatestPowerGuild
     */
    'leader_name': string;
}
/**
 * 
 * @export
 * @interface GuildInputWithLatestPowerPowerTransition
 */
export interface GuildInputWithLatestPowerPowerTransition {
    /**
     * 
     * @type {number}
     * @memberof GuildInputWithLatestPowerPowerTransition
     */
    'total_power': number | null;
}
/**
 * 
 * @export
 * @interface GuildWithLatestPower
 */
export interface GuildWithLatestPower {
    /**
     * 
     * @type {number}
     * @memberof GuildWithLatestPower
     */
    'guild_id': number;
    /**
     * 
     * @type {string}
     * @memberof GuildWithLatestPower
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GuildWithLatestPower
     */
    'leader_name': string;
    /**
     * 
     * @type {number}
     * @memberof GuildWithLatestPower
     */
    'total_power': number | null;
    /**
     * 
     * @type {string}
     * @memberof GuildWithLatestPower
     */
    'recorded_on': string | null;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelError
     */
    'errors': Array<string>;
}
/**
 * 
 * @export
 * @interface PowerTransition
 */
export interface PowerTransition {
    /**
     * 
     * @type {number}
     * @memberof PowerTransition
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof PowerTransition
     */
    'total_power': number;
    /**
     * 
     * @type {string}
     * @memberof PowerTransition
     */
    'recorded_on': string;
    /**
     * 
     * @type {string}
     * @memberof PowerTransition
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof PowerTransition
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface PowerTransitionInput
 */
export interface PowerTransitionInput {
    /**
     * 
     * @type {number}
     * @memberof PowerTransitionInput
     */
    'total_power': number;
    /**
     * 
     * @type {string}
     * @memberof PowerTransitionInput
     */
    'recorded_on': string;
}
/**
 * 
 * @export
 * @interface PowerTransitionOnlyTotalPowerInput
 */
export interface PowerTransitionOnlyTotalPowerInput {
    /**
     * 
     * @type {number}
     * @memberof PowerTransitionOnlyTotalPowerInput
     */
    'total_power': number;
}
/**
 * 
 * @export
 * @interface Server
 */
export interface Server {
    /**
     * 
     * @type {number}
     * @memberof Server
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof Server
     */
    'siege_target': boolean;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface ServerInput
 */
export interface ServerInput {
    /**
     * 
     * @type {string}
     * @memberof ServerInput
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServerInput
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof ServerInput
     */
    'siege_target': boolean;
}

/**
 * DailyPointsApi - axios parameter creator
 * @export
 */
export const DailyPointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Crop Point file
         * @param {File} pointFile 
         * @param {number} pointXAxis 
         * @param {number} pointYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsCropPointFilePost: async (pointFile: File, pointXAxis: number, pointYAxis: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pointFile' is not null or undefined
            assertParamExists('apiV1DailyPointsCropPointFilePost', 'pointFile', pointFile)
            // verify required parameter 'pointXAxis' is not null or undefined
            assertParamExists('apiV1DailyPointsCropPointFilePost', 'pointXAxis', pointXAxis)
            // verify required parameter 'pointYAxis' is not null or undefined
            assertParamExists('apiV1DailyPointsCropPointFilePost', 'pointYAxis', pointYAxis)
            const localVarPath = `/api/v1/daily_points/crop_point_file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (pointFile !== undefined) { 
                localVarFormParams.append('point_file', pointFile as any);
            }
    
            if (pointXAxis !== undefined) { 
                localVarFormParams.append('point_x_axis', pointXAxis as any);
            }
    
            if (pointYAxis !== undefined) { 
                localVarFormParams.append('point_y_axis', pointYAxis as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Crop Recent file
         * @param {File} recentFile 
         * @param {number} recentXAxis 
         * @param {number} recentYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsCropRecentFilePost: async (recentFile: File, recentXAxis: number, recentYAxis: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recentFile' is not null or undefined
            assertParamExists('apiV1DailyPointsCropRecentFilePost', 'recentFile', recentFile)
            // verify required parameter 'recentXAxis' is not null or undefined
            assertParamExists('apiV1DailyPointsCropRecentFilePost', 'recentXAxis', recentXAxis)
            // verify required parameter 'recentYAxis' is not null or undefined
            assertParamExists('apiV1DailyPointsCropRecentFilePost', 'recentYAxis', recentYAxis)
            const localVarPath = `/api/v1/daily_points/crop_recent_file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (recentFile !== undefined) { 
                localVarFormParams.append('recent_file', recentFile as any);
            }
    
            if (recentXAxis !== undefined) { 
                localVarFormParams.append('recent_x_axis', recentXAxis as any);
            }
    
            if (recentYAxis !== undefined) { 
                localVarFormParams.append('recent_y_axis', recentYAxis as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a daily point
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1DailyPointsIdDelete', 'id', id)
            const localVarPath = `/api/v1/daily_points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show a daily point
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1DailyPointsIdGet', 'id', id)
            const localVarPath = `/api/v1/daily_points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a daily point
         * @param {string} id 
         * @param {DailyPointInput} [dailyPointInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsIdPatch: async (id: string, dailyPointInput?: DailyPointInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1DailyPointsIdPatch', 'id', id)
            const localVarPath = `/api/v1/daily_points/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dailyPointInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Weekly daily point results
         * @param {string} targetDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsIndexResultSiegeGet: async (targetDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetDate' is not null or undefined
            assertParamExists('apiV1DailyPointsIndexResultSiegeGet', 'targetDate', targetDate)
            const localVarPath = `/api/v1/daily_points/index_result_siege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (targetDate !== undefined) {
                localVarQueryParameter['target_date'] = targetDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a daily point
         * @param {string} guildId 
         * @param {DailyPointInput} [dailyPointInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsGuildIdDailyPointsPost: async (guildId: string, dailyPointInput?: DailyPointInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('apiV1GuildsGuildIdDailyPointsPost', 'guildId', guildId)
            const localVarPath = `/api/v1/guilds/{guild_id}/daily_points`
                .replace(`{${"guild_id"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dailyPointInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all daily points
         * @param {string} serverId 
         * @param {string} targetDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdDailyPointsGet: async (serverId: string, targetDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsGet', 'serverId', serverId)
            // verify required parameter 'targetDate' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsGet', 'targetDate', targetDate)
            const localVarPath = `/api/v1/servers/{server_id}/daily_points`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (targetDate !== undefined) {
                localVarQueryParameter['target_date'] = targetDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show OCR results
         * @param {string} serverId 
         * @param {File} recentFile 
         * @param {File} pointFile 
         * @param {number} recentXAxis 
         * @param {number} recentYAxis 
         * @param {number} pointXAxis 
         * @param {number} pointYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost: async (serverId: string, recentFile: File, pointFile: File, recentXAxis: number, recentYAxis: number, pointXAxis: number, pointYAxis: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost', 'serverId', serverId)
            // verify required parameter 'recentFile' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost', 'recentFile', recentFile)
            // verify required parameter 'pointFile' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost', 'pointFile', pointFile)
            // verify required parameter 'recentXAxis' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost', 'recentXAxis', recentXAxis)
            // verify required parameter 'recentYAxis' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost', 'recentYAxis', recentYAxis)
            // verify required parameter 'pointXAxis' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost', 'pointXAxis', pointXAxis)
            // verify required parameter 'pointYAxis' is not null or undefined
            assertParamExists('apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost', 'pointYAxis', pointYAxis)
            const localVarPath = `/api/v1/servers/{server_id}/daily_points/upload_ocr_and_show_results`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (recentFile !== undefined) { 
                localVarFormParams.append('recent_file', recentFile as any);
            }
    
            if (pointFile !== undefined) { 
                localVarFormParams.append('point_file', pointFile as any);
            }
    
            if (recentXAxis !== undefined) { 
                localVarFormParams.append('recent_x_axis', recentXAxis as any);
            }
    
            if (recentYAxis !== undefined) { 
                localVarFormParams.append('recent_y_axis', recentYAxis as any);
            }
    
            if (pointXAxis !== undefined) { 
                localVarFormParams.append('point_x_axis', pointXAxis as any);
            }
    
            if (pointYAxis !== undefined) { 
                localVarFormParams.append('point_y_axis', pointYAxis as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DailyPointsApi - functional programming interface
 * @export
 */
export const DailyPointsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DailyPointsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Crop Point file
         * @param {File} pointFile 
         * @param {number} pointXAxis 
         * @param {number} pointYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DailyPointsCropPointFilePost(pointFile: File, pointXAxis: number, pointYAxis: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DailyPointsCropPointFilePost(pointFile, pointXAxis, pointYAxis, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1DailyPointsCropPointFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Crop Recent file
         * @param {File} recentFile 
         * @param {number} recentXAxis 
         * @param {number} recentYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DailyPointsCropRecentFilePost(recentFile: File, recentXAxis: number, recentYAxis: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DailyPointsCropRecentFilePost(recentFile, recentXAxis, recentYAxis, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1DailyPointsCropRecentFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a daily point
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DailyPointsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DailyPointsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1DailyPointsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Show a daily point
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DailyPointsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyPoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DailyPointsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1DailyPointsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a daily point
         * @param {string} id 
         * @param {DailyPointInput} [dailyPointInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DailyPointsIdPatch(id: string, dailyPointInput?: DailyPointInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyPoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DailyPointsIdPatch(id, dailyPointInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1DailyPointsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Show Weekly daily point results
         * @param {string} targetDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DailyPointsIndexResultSiegeGet(targetDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DailyPointsIndexResultSiegeGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DailyPointsIndexResultSiegeGet(targetDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1DailyPointsIndexResultSiegeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a daily point
         * @param {string} guildId 
         * @param {DailyPointInput} [dailyPointInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GuildsGuildIdDailyPointsPost(guildId: string, dailyPointInput?: DailyPointInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyPoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GuildsGuildIdDailyPointsPost(guildId, dailyPointInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1GuildsGuildIdDailyPointsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves all daily points
         * @param {string} serverId 
         * @param {string} targetDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersServerIdDailyPointsGet(serverId: string, targetDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DailyPoint>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersServerIdDailyPointsGet(serverId, targetDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1ServersServerIdDailyPointsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Show OCR results
         * @param {string} serverId 
         * @param {File} recentFile 
         * @param {File} pointFile 
         * @param {number} recentXAxis 
         * @param {number} recentYAxis 
         * @param {number} pointXAxis 
         * @param {number} pointYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost(serverId: string, recentFile: File, pointFile: File, recentXAxis: number, recentYAxis: number, pointXAxis: number, pointYAxis: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DailyPointOCR>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost(serverId, recentFile, pointFile, recentXAxis, recentYAxis, pointXAxis, pointYAxis, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyPointsApi.apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DailyPointsApi - factory interface
 * @export
 */
export const DailyPointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DailyPointsApiFp(configuration)
    return {
        /**
         * 
         * @summary Crop Point file
         * @param {File} pointFile 
         * @param {number} pointXAxis 
         * @param {number} pointYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsCropPointFilePost(pointFile: File, pointXAxis: number, pointYAxis: number, options?: any): AxiosPromise<File> {
            return localVarFp.apiV1DailyPointsCropPointFilePost(pointFile, pointXAxis, pointYAxis, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Crop Recent file
         * @param {File} recentFile 
         * @param {number} recentXAxis 
         * @param {number} recentYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsCropRecentFilePost(recentFile: File, recentXAxis: number, recentYAxis: number, options?: any): AxiosPromise<File> {
            return localVarFp.apiV1DailyPointsCropRecentFilePost(recentFile, recentXAxis, recentYAxis, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a daily point
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1DailyPointsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show a daily point
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsIdGet(id: string, options?: any): AxiosPromise<DailyPoint> {
            return localVarFp.apiV1DailyPointsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a daily point
         * @param {string} id 
         * @param {DailyPointInput} [dailyPointInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsIdPatch(id: string, dailyPointInput?: DailyPointInput, options?: any): AxiosPromise<DailyPoint> {
            return localVarFp.apiV1DailyPointsIdPatch(id, dailyPointInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Weekly daily point results
         * @param {string} targetDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DailyPointsIndexResultSiegeGet(targetDate: string, options?: any): AxiosPromise<ApiV1DailyPointsIndexResultSiegeGet200Response> {
            return localVarFp.apiV1DailyPointsIndexResultSiegeGet(targetDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a daily point
         * @param {string} guildId 
         * @param {DailyPointInput} [dailyPointInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsGuildIdDailyPointsPost(guildId: string, dailyPointInput?: DailyPointInput, options?: any): AxiosPromise<DailyPoint> {
            return localVarFp.apiV1GuildsGuildIdDailyPointsPost(guildId, dailyPointInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all daily points
         * @param {string} serverId 
         * @param {string} targetDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdDailyPointsGet(serverId: string, targetDate: string, options?: any): AxiosPromise<Array<DailyPoint>> {
            return localVarFp.apiV1ServersServerIdDailyPointsGet(serverId, targetDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show OCR results
         * @param {string} serverId 
         * @param {File} recentFile 
         * @param {File} pointFile 
         * @param {number} recentXAxis 
         * @param {number} recentYAxis 
         * @param {number} pointXAxis 
         * @param {number} pointYAxis 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost(serverId: string, recentFile: File, pointFile: File, recentXAxis: number, recentYAxis: number, pointXAxis: number, pointYAxis: number, options?: any): AxiosPromise<Array<DailyPointOCR>> {
            return localVarFp.apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost(serverId, recentFile, pointFile, recentXAxis, recentYAxis, pointXAxis, pointYAxis, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DailyPointsApi - object-oriented interface
 * @export
 * @class DailyPointsApi
 * @extends {BaseAPI}
 */
export class DailyPointsApi extends BaseAPI {
    /**
     * 
     * @summary Crop Point file
     * @param {File} pointFile 
     * @param {number} pointXAxis 
     * @param {number} pointYAxis 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1DailyPointsCropPointFilePost(pointFile: File, pointXAxis: number, pointYAxis: number, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1DailyPointsCropPointFilePost(pointFile, pointXAxis, pointYAxis, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Crop Recent file
     * @param {File} recentFile 
     * @param {number} recentXAxis 
     * @param {number} recentYAxis 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1DailyPointsCropRecentFilePost(recentFile: File, recentXAxis: number, recentYAxis: number, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1DailyPointsCropRecentFilePost(recentFile, recentXAxis, recentYAxis, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a daily point
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1DailyPointsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1DailyPointsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show a daily point
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1DailyPointsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1DailyPointsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a daily point
     * @param {string} id 
     * @param {DailyPointInput} [dailyPointInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1DailyPointsIdPatch(id: string, dailyPointInput?: DailyPointInput, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1DailyPointsIdPatch(id, dailyPointInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Weekly daily point results
     * @param {string} targetDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1DailyPointsIndexResultSiegeGet(targetDate: string, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1DailyPointsIndexResultSiegeGet(targetDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a daily point
     * @param {string} guildId 
     * @param {DailyPointInput} [dailyPointInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1GuildsGuildIdDailyPointsPost(guildId: string, dailyPointInput?: DailyPointInput, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1GuildsGuildIdDailyPointsPost(guildId, dailyPointInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all daily points
     * @param {string} serverId 
     * @param {string} targetDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1ServersServerIdDailyPointsGet(serverId: string, targetDate: string, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1ServersServerIdDailyPointsGet(serverId, targetDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show OCR results
     * @param {string} serverId 
     * @param {File} recentFile 
     * @param {File} pointFile 
     * @param {number} recentXAxis 
     * @param {number} recentYAxis 
     * @param {number} pointXAxis 
     * @param {number} pointYAxis 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyPointsApi
     */
    public apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost(serverId: string, recentFile: File, pointFile: File, recentXAxis: number, recentYAxis: number, pointXAxis: number, pointYAxis: number, options?: RawAxiosRequestConfig) {
        return DailyPointsApiFp(this.configuration).apiV1ServersServerIdDailyPointsUploadOcrAndShowResultsPost(serverId, recentFile, pointFile, recentXAxis, recentYAxis, pointXAxis, pointYAxis, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GuildsApi - axios parameter creator
 * @export
 */
export const GuildsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a guild
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1GuildsIdDelete', 'id', id)
            const localVarPath = `/api/v1/guilds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show a guild
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1GuildsIdGet', 'id', id)
            const localVarPath = `/api/v1/guilds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a guild
         * @param {string} id 
         * @param {GuildInputUpdate} [guildInputUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsIdPatch: async (id: string, guildInputUpdate?: GuildInputUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1GuildsIdPatch', 'id', id)
            const localVarPath = `/api/v1/guilds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guildInputUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a guild with latest power
         * @param {string} serverId 
         * @param {GuildInputWithLatestPower} [guildInputWithLatestPower] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdGuildsCreateWithLatestPowerPost: async (serverId: string, guildInputWithLatestPower?: GuildInputWithLatestPower, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('apiV1ServersServerIdGuildsCreateWithLatestPowerPost', 'serverId', serverId)
            const localVarPath = `/api/v1/servers/{server_id}/guilds/create_with_latest_power`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guildInputWithLatestPower, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all guilds
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdGuildsGet: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('apiV1ServersServerIdGuildsGet', 'serverId', serverId)
            const localVarPath = `/api/v1/servers/{server_id}/guilds`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all guilds with latest power
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdGuildsIndexWithLatestPowerGet: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('apiV1ServersServerIdGuildsIndexWithLatestPowerGet', 'serverId', serverId)
            const localVarPath = `/api/v1/servers/{server_id}/guilds/index_with_latest_power`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a guild
         * @param {string} serverId 
         * @param {GuildInputCreate} [guildInputCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdGuildsPost: async (serverId: string, guildInputCreate?: GuildInputCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('apiV1ServersServerIdGuildsPost', 'serverId', serverId)
            const localVarPath = `/api/v1/servers/{server_id}/guilds`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guildInputCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuildsApi - functional programming interface
 * @export
 */
export const GuildsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuildsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a guild
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GuildsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GuildsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuildsApi.apiV1GuildsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Show a guild
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GuildsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Guild>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GuildsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuildsApi.apiV1GuildsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a guild
         * @param {string} id 
         * @param {GuildInputUpdate} [guildInputUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GuildsIdPatch(id: string, guildInputUpdate?: GuildInputUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GuildsIdPatch(id, guildInputUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuildsApi.apiV1GuildsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a guild with latest power
         * @param {string} serverId 
         * @param {GuildInputWithLatestPower} [guildInputWithLatestPower] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersServerIdGuildsCreateWithLatestPowerPost(serverId: string, guildInputWithLatestPower?: GuildInputWithLatestPower, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersServerIdGuildsCreateWithLatestPowerPost(serverId, guildInputWithLatestPower, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuildsApi.apiV1ServersServerIdGuildsCreateWithLatestPowerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves all guilds
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersServerIdGuildsGet(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Guild>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersServerIdGuildsGet(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuildsApi.apiV1ServersServerIdGuildsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves all guilds with latest power
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersServerIdGuildsIndexWithLatestPowerGet(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuildWithLatestPower>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersServerIdGuildsIndexWithLatestPowerGet(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuildsApi.apiV1ServersServerIdGuildsIndexWithLatestPowerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a guild
         * @param {string} serverId 
         * @param {GuildInputCreate} [guildInputCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersServerIdGuildsPost(serverId: string, guildInputCreate?: GuildInputCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersServerIdGuildsPost(serverId, guildInputCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GuildsApi.apiV1ServersServerIdGuildsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GuildsApi - factory interface
 * @export
 */
export const GuildsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuildsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a guild
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1GuildsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show a guild
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsIdGet(id: string, options?: any): AxiosPromise<Guild> {
            return localVarFp.apiV1GuildsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a guild
         * @param {string} id 
         * @param {GuildInputUpdate} [guildInputUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsIdPatch(id: string, guildInputUpdate?: GuildInputUpdate, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1GuildsIdPatch(id, guildInputUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a guild with latest power
         * @param {string} serverId 
         * @param {GuildInputWithLatestPower} [guildInputWithLatestPower] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdGuildsCreateWithLatestPowerPost(serverId: string, guildInputWithLatestPower?: GuildInputWithLatestPower, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ServersServerIdGuildsCreateWithLatestPowerPost(serverId, guildInputWithLatestPower, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all guilds
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdGuildsGet(serverId: string, options?: any): AxiosPromise<Array<Guild>> {
            return localVarFp.apiV1ServersServerIdGuildsGet(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all guilds with latest power
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdGuildsIndexWithLatestPowerGet(serverId: string, options?: any): AxiosPromise<Array<GuildWithLatestPower>> {
            return localVarFp.apiV1ServersServerIdGuildsIndexWithLatestPowerGet(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a guild
         * @param {string} serverId 
         * @param {GuildInputCreate} [guildInputCreate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersServerIdGuildsPost(serverId: string, guildInputCreate?: GuildInputCreate, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ServersServerIdGuildsPost(serverId, guildInputCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GuildsApi - object-oriented interface
 * @export
 * @class GuildsApi
 * @extends {BaseAPI}
 */
export class GuildsApi extends BaseAPI {
    /**
     * 
     * @summary Delete a guild
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApi
     */
    public apiV1GuildsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return GuildsApiFp(this.configuration).apiV1GuildsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show a guild
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApi
     */
    public apiV1GuildsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return GuildsApiFp(this.configuration).apiV1GuildsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a guild
     * @param {string} id 
     * @param {GuildInputUpdate} [guildInputUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApi
     */
    public apiV1GuildsIdPatch(id: string, guildInputUpdate?: GuildInputUpdate, options?: RawAxiosRequestConfig) {
        return GuildsApiFp(this.configuration).apiV1GuildsIdPatch(id, guildInputUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a guild with latest power
     * @param {string} serverId 
     * @param {GuildInputWithLatestPower} [guildInputWithLatestPower] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApi
     */
    public apiV1ServersServerIdGuildsCreateWithLatestPowerPost(serverId: string, guildInputWithLatestPower?: GuildInputWithLatestPower, options?: RawAxiosRequestConfig) {
        return GuildsApiFp(this.configuration).apiV1ServersServerIdGuildsCreateWithLatestPowerPost(serverId, guildInputWithLatestPower, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all guilds
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApi
     */
    public apiV1ServersServerIdGuildsGet(serverId: string, options?: RawAxiosRequestConfig) {
        return GuildsApiFp(this.configuration).apiV1ServersServerIdGuildsGet(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all guilds with latest power
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApi
     */
    public apiV1ServersServerIdGuildsIndexWithLatestPowerGet(serverId: string, options?: RawAxiosRequestConfig) {
        return GuildsApiFp(this.configuration).apiV1ServersServerIdGuildsIndexWithLatestPowerGet(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a guild
     * @param {string} serverId 
     * @param {GuildInputCreate} [guildInputCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApi
     */
    public apiV1ServersServerIdGuildsPost(serverId: string, guildInputCreate?: GuildInputCreate, options?: RawAxiosRequestConfig) {
        return GuildsApiFp(this.configuration).apiV1ServersServerIdGuildsPost(serverId, guildInputCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PowerTransitionsApi - axios parameter creator
 * @export
 */
export const PowerTransitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates or Update a power transition
         * @param {string} guildId 
         * @param {PowerTransitionOnlyTotalPowerInput} [powerTransitionOnlyTotalPowerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch: async (guildId: string, powerTransitionOnlyTotalPowerInput?: PowerTransitionOnlyTotalPowerInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch', 'guildId', guildId)
            const localVarPath = `/api/v1/guilds/{guild_id}/power_transitions/create_or_update`
                .replace(`{${"guild_id"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(powerTransitionOnlyTotalPowerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a power transition
         * @param {string} guildId 
         * @param {PowerTransitionInput} [powerTransitionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsGuildIdPowerTransitionsPost: async (guildId: string, powerTransitionInput?: PowerTransitionInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('apiV1GuildsGuildIdPowerTransitionsPost', 'guildId', guildId)
            const localVarPath = `/api/v1/guilds/{guild_id}/power_transitions`
                .replace(`{${"guild_id"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(powerTransitionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all power transitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PowerTransitionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/power_transitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a power transition
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PowerTransitionsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1PowerTransitionsIdDelete', 'id', id)
            const localVarPath = `/api/v1/power_transitions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show a power transition
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PowerTransitionsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1PowerTransitionsIdGet', 'id', id)
            const localVarPath = `/api/v1/power_transitions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a power transition
         * @param {string} id 
         * @param {PowerTransitionInput} [powerTransitionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PowerTransitionsIdPatch: async (id: string, powerTransitionInput?: PowerTransitionInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1PowerTransitionsIdPatch', 'id', id)
            const localVarPath = `/api/v1/power_transitions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(powerTransitionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PowerTransitionsApi - functional programming interface
 * @export
 */
export const PowerTransitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PowerTransitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates or Update a power transition
         * @param {string} guildId 
         * @param {PowerTransitionOnlyTotalPowerInput} [powerTransitionOnlyTotalPowerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch(guildId: string, powerTransitionOnlyTotalPowerInput?: PowerTransitionOnlyTotalPowerInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch(guildId, powerTransitionOnlyTotalPowerInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PowerTransitionsApi.apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a power transition
         * @param {string} guildId 
         * @param {PowerTransitionInput} [powerTransitionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GuildsGuildIdPowerTransitionsPost(guildId: string, powerTransitionInput?: PowerTransitionInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GuildsGuildIdPowerTransitionsPost(guildId, powerTransitionInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PowerTransitionsApi.apiV1GuildsGuildIdPowerTransitionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves all power transitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PowerTransitionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PowerTransition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PowerTransitionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PowerTransitionsApi.apiV1PowerTransitionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a power transition
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PowerTransitionsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PowerTransitionsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PowerTransitionsApi.apiV1PowerTransitionsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Show a power transition
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PowerTransitionsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PowerTransition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PowerTransitionsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PowerTransitionsApi.apiV1PowerTransitionsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a power transition
         * @param {string} id 
         * @param {PowerTransitionInput} [powerTransitionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PowerTransitionsIdPatch(id: string, powerTransitionInput?: PowerTransitionInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PowerTransitionsIdPatch(id, powerTransitionInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PowerTransitionsApi.apiV1PowerTransitionsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PowerTransitionsApi - factory interface
 * @export
 */
export const PowerTransitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PowerTransitionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates or Update a power transition
         * @param {string} guildId 
         * @param {PowerTransitionOnlyTotalPowerInput} [powerTransitionOnlyTotalPowerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch(guildId: string, powerTransitionOnlyTotalPowerInput?: PowerTransitionOnlyTotalPowerInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch(guildId, powerTransitionOnlyTotalPowerInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a power transition
         * @param {string} guildId 
         * @param {PowerTransitionInput} [powerTransitionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GuildsGuildIdPowerTransitionsPost(guildId: string, powerTransitionInput?: PowerTransitionInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1GuildsGuildIdPowerTransitionsPost(guildId, powerTransitionInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all power transitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PowerTransitionsGet(options?: any): AxiosPromise<Array<PowerTransition>> {
            return localVarFp.apiV1PowerTransitionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a power transition
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PowerTransitionsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1PowerTransitionsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show a power transition
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PowerTransitionsIdGet(id: string, options?: any): AxiosPromise<PowerTransition> {
            return localVarFp.apiV1PowerTransitionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a power transition
         * @param {string} id 
         * @param {PowerTransitionInput} [powerTransitionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PowerTransitionsIdPatch(id: string, powerTransitionInput?: PowerTransitionInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1PowerTransitionsIdPatch(id, powerTransitionInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PowerTransitionsApi - object-oriented interface
 * @export
 * @class PowerTransitionsApi
 * @extends {BaseAPI}
 */
export class PowerTransitionsApi extends BaseAPI {
    /**
     * 
     * @summary Creates or Update a power transition
     * @param {string} guildId 
     * @param {PowerTransitionOnlyTotalPowerInput} [powerTransitionOnlyTotalPowerInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerTransitionsApi
     */
    public apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch(guildId: string, powerTransitionOnlyTotalPowerInput?: PowerTransitionOnlyTotalPowerInput, options?: RawAxiosRequestConfig) {
        return PowerTransitionsApiFp(this.configuration).apiV1GuildsGuildIdPowerTransitionsCreateOrUpdatePatch(guildId, powerTransitionOnlyTotalPowerInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a power transition
     * @param {string} guildId 
     * @param {PowerTransitionInput} [powerTransitionInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerTransitionsApi
     */
    public apiV1GuildsGuildIdPowerTransitionsPost(guildId: string, powerTransitionInput?: PowerTransitionInput, options?: RawAxiosRequestConfig) {
        return PowerTransitionsApiFp(this.configuration).apiV1GuildsGuildIdPowerTransitionsPost(guildId, powerTransitionInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all power transitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerTransitionsApi
     */
    public apiV1PowerTransitionsGet(options?: RawAxiosRequestConfig) {
        return PowerTransitionsApiFp(this.configuration).apiV1PowerTransitionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a power transition
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerTransitionsApi
     */
    public apiV1PowerTransitionsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return PowerTransitionsApiFp(this.configuration).apiV1PowerTransitionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show a power transition
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerTransitionsApi
     */
    public apiV1PowerTransitionsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return PowerTransitionsApiFp(this.configuration).apiV1PowerTransitionsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a power transition
     * @param {string} id 
     * @param {PowerTransitionInput} [powerTransitionInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerTransitionsApi
     */
    public apiV1PowerTransitionsIdPatch(id: string, powerTransitionInput?: PowerTransitionInput, options?: RawAxiosRequestConfig) {
        return PowerTransitionsApiFp(this.configuration).apiV1PowerTransitionsIdPatch(id, powerTransitionInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ServersApi - axios parameter creator
 * @export
 */
export const ServersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/servers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a server
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ServersIdDelete', 'id', id)
            const localVarPath = `/api/v1/servers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show a server
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ServersIdGet', 'id', id)
            const localVarPath = `/api/v1/servers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a server
         * @param {string} id 
         * @param {ServerInput} [serverInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersIdPatch: async (id: string, serverInput?: ServerInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ServersIdPatch', 'id', id)
            const localVarPath = `/api/v1/servers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serverInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a server
         * @param {ServerInput} [serverInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersPost: async (serverInput?: ServerInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/servers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serverInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServersApi - functional programming interface
 * @export
 */
export const ServersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Server>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServersApi.apiV1ServersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a server
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServersApi.apiV1ServersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Show a server
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Server>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServersApi.apiV1ServersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a server
         * @param {string} id 
         * @param {ServerInput} [serverInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersIdPatch(id: string, serverInput?: ServerInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersIdPatch(id, serverInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServersApi.apiV1ServersIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a server
         * @param {ServerInput} [serverInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ServersPost(serverInput?: ServerInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ServersPost(serverInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ServersApi.apiV1ServersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ServersApi - factory interface
 * @export
 */
export const ServersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServersApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersGet(options?: any): AxiosPromise<Array<Server>> {
            return localVarFp.apiV1ServersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a server
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ServersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show a server
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersIdGet(id: string, options?: any): AxiosPromise<Server> {
            return localVarFp.apiV1ServersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a server
         * @param {string} id 
         * @param {ServerInput} [serverInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersIdPatch(id: string, serverInput?: ServerInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ServersIdPatch(id, serverInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a server
         * @param {ServerInput} [serverInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServersPost(serverInput?: ServerInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ServersPost(serverInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServersApi - object-oriented interface
 * @export
 * @class ServersApi
 * @extends {BaseAPI}
 */
export class ServersApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public apiV1ServersGet(options?: RawAxiosRequestConfig) {
        return ServersApiFp(this.configuration).apiV1ServersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a server
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public apiV1ServersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ServersApiFp(this.configuration).apiV1ServersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show a server
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public apiV1ServersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ServersApiFp(this.configuration).apiV1ServersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a server
     * @param {string} id 
     * @param {ServerInput} [serverInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public apiV1ServersIdPatch(id: string, serverInput?: ServerInput, options?: RawAxiosRequestConfig) {
        return ServersApiFp(this.configuration).apiV1ServersIdPatch(id, serverInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a server
     * @param {ServerInput} [serverInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServersApi
     */
    public apiV1ServersPost(serverInput?: ServerInput, options?: RawAxiosRequestConfig) {
        return ServersApiFp(this.configuration).apiV1ServersPost(serverInput, options).then((request) => request(this.axios, this.basePath));
    }
}



